from __future__ import annotations

from typing import Final

from .multilevel_sensor import (
    UNIT_AMPERE as SENSOR_UNIT_AMPERE,
    UNIT_BTU_H,
    UNIT_CELSIUS,
    UNIT_CENTIMETER,
    UNIT_CUBIC_FEET_PER_MINUTE,
    UNIT_CUBIC_METER as SENSOR_UNIT_CUBIC_METER,
    UNIT_CUBIC_METER_PER_HOUR,
    UNIT_DECIBEL,
    UNIT_DEGREES,
    UNIT_DENSITY,
    UNIT_FAHRENHEIT,
    UNIT_FEET,
    UNIT_GALLONS,
    UNIT_HERTZ,
    UNIT_INCHES_OF_MERCURY,
    UNIT_INCHES_PER_HOUR,
    UNIT_KILOGRAM,
    UNIT_KILOHERTZ,
    UNIT_LITER,
    UNIT_LUX,
    UNIT_M_S,
    UNIT_METER,
    UNIT_MICROGRAM_PER_CUBIC_METER,
    UNIT_MILLIAMPERE,
    UNIT_MILLIMETER_HOUR,
    UNIT_MILLIVOLT,
    UNIT_MPH,
    UNIT_PARTS_MILLION,
    UNIT_PERCENTAGE_VALUE,
    UNIT_POUND_PER_SQUARE_INCH,
    UNIT_POUNDS,
    UNIT_POWER_LEVEL,
    UNIT_RSSI,
    UNIT_SECOND,
    UNIT_SYSTOLIC,
    UNIT_VOLT as SENSOR_UNIT_VOLT,
    UNIT_WATT as SENSOR_UNIT_WATT,
    UNIT_WATT_PER_SQUARE_METER,
    MultilevelSensorScaleType,
)


# #### UNITS OF MEASUREMENT ####
POWER_WATT: Final = "W"
POWER_BTU_PER_HOUR: Final = "BTU/h"
ELECTRIC_CURRENT_MILLIAMPERE: Final = "mA"
ELECTRIC_CURRENT_AMPERE: Final = "A"
ELECTRIC_POTENTIAL_MILLIVOLT: Final = "mV"
ELECTRIC_POTENTIAL_VOLT: Final = "V"
DEGREE: Final = "°"
TEMP_CELSIUS: Final = "°C"
TEMP_FAHRENHEIT: Final = "°F"
TIME_SECONDS: Final = "s"
LENGTH_CENTIMETERS: Final = "cm"
LENGTH_METERS: Final = "m"
LENGTH_FEET: Final = "ft"
FREQUENCY_HERTZ: Final = "Hz"
FREQUENCY_KILOHERTZ: Final = "kHz"
PRESSURE_MMHG: Final = "mmHg"
PRESSURE_INHG: Final = "inHg"
PRESSURE_PSI: Final = "psi"
VOLUME_CUBIC_METERS: Final = "m³"
VOLUME_GALLONS: Final = "gal"
VOLUME_LITERS: Final = "l"
VOLUME_FLUID_OUNCE: Final = "fl. oz."
VOLUME_FLOW_RATE_CUBIC_METERS_PER_HOUR: Final = "m³/h"
VOLUME_FLOW_RATE_CUBIC_FEET_PER_MINUTE: Final = "ft³/m"
MASS_KILOGRAMS: Final = "kg"
MASS_POUNDS: Final = "lb"
LIGHT_LUX: Final = "lx"
PERCENTAGE: Final = "%"
IRRADIATION_WATTS_PER_SQUARE_METER: Final = "W/m²"
PRECIPITATION_MILLIMETERS_PER_HOUR: Final = "mm/h"
PRECIPITATION_INCHES_PER_HOUR: Final = "in/h"
CONCENTRATION_MICROGRAMS_PER_CUBIC_METER: Final = "µg/m³"
CONCENTRATION_PARTS_PER_MILLION: Final = "ppm"
SPEED_METERS_PER_SECOND: Final = "m/s"
SPEED_MILES_PER_HOUR: Final = "mph"
SIGNAL_STRENGTH_DECIBELS: Final = "dB"
SIGNAL_STRENGTH_DECIBELS_MILLIWATT: Final = "dBm"


MULTILEVEL_SENSOR_UNIT_MAP: dict[str, set[MultilevelSensorScaleType]] = {
    ELECTRIC_CURRENT_AMPERE: SENSOR_UNIT_AMPERE,
    POWER_BTU_PER_HOUR: UNIT_BTU_H,
    TEMP_CELSIUS: UNIT_CELSIUS,
    LENGTH_CENTIMETERS: UNIT_CENTIMETER,
    VOLUME_FLOW_RATE_CUBIC_FEET_PER_MINUTE: UNIT_CUBIC_FEET_PER_MINUTE,
    VOLUME_CUBIC_METERS: SENSOR_UNIT_CUBIC_METER,
    VOLUME_FLOW_RATE_CUBIC_METERS_PER_HOUR: UNIT_CUBIC_METER_PER_HOUR,
    SIGNAL_STRENGTH_DECIBELS: UNIT_DECIBEL,
    DEGREE: UNIT_DEGREES,
    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER: {
        *UNIT_DENSITY,
        *UNIT_MICROGRAM_PER_CUBIC_METER,
    },
    TEMP_FAHRENHEIT: UNIT_FAHRENHEIT,
    LENGTH_FEET: UNIT_FEET,
    VOLUME_GALLONS: UNIT_GALLONS,
    FREQUENCY_HERTZ: UNIT_HERTZ,
    PRESSURE_INHG: UNIT_INCHES_OF_MERCURY,
    PRECIPITATION_INCHES_PER_HOUR: UNIT_INCHES_PER_HOUR,
    MASS_KILOGRAMS: UNIT_KILOGRAM,
    FREQUENCY_KILOHERTZ: UNIT_KILOHERTZ,
    VOLUME_LITERS: UNIT_LITER,
    LIGHT_LUX: UNIT_LUX,
    LENGTH_METERS: UNIT_METER,
    ELECTRIC_CURRENT_MILLIAMPERE: UNIT_MILLIAMPERE,
    PRECIPITATION_MILLIMETERS_PER_HOUR: UNIT_MILLIMETER_HOUR,
    ELECTRIC_POTENTIAL_MILLIVOLT: UNIT_MILLIVOLT,
    SPEED_MILES_PER_HOUR: UNIT_MPH,
    SPEED_METERS_PER_SECOND: UNIT_M_S,
    CONCENTRATION_PARTS_PER_MILLION: UNIT_PARTS_MILLION,
    PERCENTAGE: {*UNIT_PERCENTAGE_VALUE, *UNIT_RSSI},
    MASS_POUNDS: UNIT_POUNDS,
    PRESSURE_PSI: UNIT_POUND_PER_SQUARE_INCH,
    SIGNAL_STRENGTH_DECIBELS_MILLIWATT: UNIT_POWER_LEVEL,
    TIME_SECONDS: UNIT_SECOND,
    PRESSURE_MMHG: UNIT_SYSTOLIC,
    ELECTRIC_POTENTIAL_VOLT: SENSOR_UNIT_VOLT,
    POWER_WATT: SENSOR_UNIT_WATT,
    IRRADIATION_WATTS_PER_SQUARE_METER: UNIT_WATT_PER_SQUARE_METER,
}


# Home Assistant - components - zwave_js
# zwave-js-server-python
